name: Clone Releases
on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

permissions:
  contents: write
  packages: read

jobs:
  copy-releases:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy Release Assets
        env:
          SRC_REPO_TOKEN: ${{ secrets.TOKEN }}
          DEST_REPO_TOKEN: ${{ secrets.TOKEN }}
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "Fetching latest release info from source repo..."
          RELEASE_INFO=$(curl -s -H "Authorization: token ${SRC_REPO_TOKEN}" \
            "https://api.github.com/repos/ping-maxwell/multinite-app/releases/latest")
          
          # Check for errors in the API response
          if echo "$RELEASE_INFO" | jq -e '.message' >/dev/null; then
            ERROR_MSG=$(echo "$RELEASE_INFO" | jq -r '.message')
            echo "Error accessing GitHub API: $ERROR_MSG"
            exit 1
          fi
          
          # Get version and verify it's not null
          VERSION=$(echo "$RELEASE_INFO" | jq -r .tag_name)
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            echo "Error: Could not determine version from release info"
            exit 1
          fi

          # Ensure version starts with 'v'
          [[ $VERSION != v* ]] && VERSION="v$VERSION"
          
          # Check if release already exists in destination repo
          if gh release view "$VERSION" &>/dev/null; then
            echo "Release $VERSION already exists in destination repo. Skipping."
            exit 0
          fi
          
          # Verify we have required release information
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r .name)
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r .body)
          
          if [ "$RELEASE_NAME" = "null" ] || [ -z "$RELEASE_NAME" ]; then
            echo "Error: Release name is missing"
            exit 1
          fi
          
          echo "New release detected: $VERSION"
          
          # Create directory for assets
          mkdir -p assets
          cd assets
          
          # Download all assets EXCEPT source code archives
          echo "$RELEASE_INFO" | jq -r '.assets[] | select(
            .name as $name | 
            ($name | test("^multinite-.*\\.(zip|tar\\.gz)$") | not)
          ) | [.name, .url] | @tsv' | while IFS=$'\t' read -r NAME URL; do
            if [ -n "$NAME" ] && [ -n "$URL" ]; then
              echo "Downloading $NAME from $URL"
              curl -L -H "Authorization: token ${SRC_REPO_TOKEN}" \
                -H "Accept: application/octet-stream" \
                "$URL" --output "$NAME"
            fi
          done
          
          # Verify we have downloaded files
          if [ -z "$(ls -A)" ]; then
            echo "Error: No files were downloaded"
            exit 1
          fi
          
          # List downloaded files
          echo "Downloaded files:"
          ls -la
          
          # Create new release with same name and body
          echo "Creating release $VERSION"
          echo "$RELEASE_BODY" > release_notes.md
          gh release create "$VERSION" * \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md
